[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "maowise"
version = "0.1.0"
description = "Micro-Arc Oxidation Thermal-Control Coating Optimizer"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "MAO-Wise Team", email = "maowise@example.com"}
]
keywords = ["materials", "coating", "optimization", "machine-learning"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Materials Science",
]

dependencies = [
    # Core dependencies - from requirements.txt
    "fastapi>=0.68.0",
    "uvicorn[standard]>=0.15.0",
    "streamlit>=1.28.0",
    "pydantic>=1.8.0",
    "requests>=2.25.0",
    "pyyaml>=5.4.0",
    "pandas>=1.3.0",
    "numpy>=1.21.0",
    "scikit-learn>=1.0.0",
    "sentence-transformers>=2.0.0",
    "faiss-cpu>=1.7.0",
    "loguru>=0.5.0",
    
    # PDF processing
    "pymupdf>=1.18.0",
    "camelot-py[cv]>=0.10.0",
    "tabula-py>=2.2.0",
    "pdfminer.six>=20211012",
    "pytesseract>=0.3.8",
    
    # ML and optimization
    "torch>=1.9.0",
    "botorch>=0.6.0",
    "pymoo>=0.6.0",
    "mlflow>=1.20.0",
    
    # Data processing
    "spacy>=3.4.0",
    "chromadb>=0.3.0",
    "dvc[s3]>=2.30.0",
    "pyarrow>=5.0.0",
    
    # LLM integration
    "openai>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.12",
    "black>=21.0",
    "ruff>=0.0.200",
    "isort>=5.9",
    "pre-commit>=2.15",
]

test = [
    "pytest>=6.0",
    "pytest-cov>=2.12",
    "httpx>=0.24.0",  # For FastAPI testing
    "selenium>=4.0.0",
    "webdriver-manager>=3.8.0",
]

all = [
    "maowise[dev,test]"
]

[project.urls]
Homepage = "https://github.com/your-org/mao-wise"
Documentation = "https://github.com/your-org/mao-wise#readme"
Repository = "https://github.com/your-org/mao-wise.git"
"Bug Tracker" = "https://github.com/your-org/mao-wise/issues"

[project.scripts]
maowise-ingest = "maowise.dataflow.ingest:main"
maowise-build-kb = "maowise.kb.build_index:main"
maowise-train = "maowise.models.train_fwd:main"

[tool.setuptools]
packages = ["maowise"]
include-package-data = true

[tool.setuptools.package-data]
maowise = [
    "config/*.yaml",
    "config/*.json", 
    "experts/*.yaml",
    "llm/prompts/*.yaml",
]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["maowise"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["maowise"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
